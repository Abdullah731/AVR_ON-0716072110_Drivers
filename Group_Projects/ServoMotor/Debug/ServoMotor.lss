
ServoMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000223c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000223c  000022d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800078  00800078  000022e8  2**0
                  ALLOC
  3 .stab         00001fd4  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001200  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000054bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000576c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000073b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009050  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000091b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000943d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <main>
      8a:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMERS_voidTimer0Init>:
#include "TIMERS_config.h"

void (*Global_pvCTCFunction)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Set Fast PWM Mode*/
	SET_BIT(TCCR0, TCCR0_WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	
	/*Set Mode : Set On Top, Clear On Compare*/
	CLR_BIT(TCCR0, TCCR0_COM00);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_COM01);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24
		
	/*Prescaler = 8*/
	TCCR0 &= 0b11111000;
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24
	TCCR0 |= 0b00000010;	
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	/*Set Mode 14*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
     bb0:	af e4       	ldi	r26, 0x4F	; 79
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e4       	ldi	r30, 0x4F	; 79
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8e 7f       	andi	r24, 0xFE	; 254
     bbc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, TCCR1A_WGM11);
     bbe:	af e4       	ldi	r26, 0x4F	; 79
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ef e4       	ldi	r30, 0x4F	; 79
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
     bcc:	ae e4       	ldi	r26, 0x4E	; 78
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ee e4       	ldi	r30, 0x4E	; 78
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	88 60       	ori	r24, 0x08	; 8
     bd8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM13);
     bda:	ae e4       	ldi	r26, 0x4E	; 78
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ee e4       	ldi	r30, 0x4E	; 78
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 61       	ori	r24, 0x10	; 16
     be6:	8c 93       	st	X, r24

	/*Set Mode: Set On Top Clear On Compare*/
	SET_BIT(TCCR1A, TCCR1A_COM1A1);
     be8:	af e4       	ldi	r26, 0x4F	; 79
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ef e4       	ldi	r30, 0x4F	; 79
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_COM1A0);
     bf6:	af e4       	ldi	r26, 0x4F	; 79
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e4       	ldi	r30, 0x4F	; 79
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7b       	andi	r24, 0xBF	; 191
     c02:	8c 93       	st	X, r24
	
	/*Set Prescaler To Be = 8*/
	CLR_BIT(TCCR1B, TCCR1B_CS10);
     c04:	ae e4       	ldi	r26, 0x4E	; 78
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ee e4       	ldi	r30, 0x4E	; 78
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8e 7f       	andi	r24, 0xFE	; 254
     c10:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS11);
     c12:	ae e4       	ldi	r26, 0x4E	; 78
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ee e4       	ldi	r30, 0x4E	; 78
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_CS12);
     c20:	ae e4       	ldi	r26, 0x4E	; 78
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ee e4       	ldi	r30, 0x4E	; 78
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8b 7f       	andi	r24, 0xFB	; 251
     c2c:	8c 93       	st	X, r24
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <TIMERS_voidTimer1SetOverflowValue>:

void TIMERS_voidTimer1SetOverflowValue(u16 Copy_u16OverflowValue)
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <TIMERS_voidTimer1SetOverflowValue+0x6>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16OverflowValue;
     c42:	e6 e4       	ldi	r30, 0x46	; 70
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <TIMERS_voidTimer1ChannelASetCompareMatchValue>:

void TIMERS_voidTimer1ChannelASetCompareMatchValue(u16 Copy_u16CompareMatchValue)
{
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <TIMERS_voidTimer1ChannelASetCompareMatchValue+0x6>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatchValue;
     c66:	ea e4       	ldi	r30, 0x4A	; 74
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	80 83       	st	Z, r24
}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8CompareMatchValue)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	0f 92       	push	r0
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value To The OCR0 Register*/
	OCR0 = Copy_u8CompareMatchValue;
     c88:	ec e5       	ldi	r30, 0x5C	; 92
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	80 83       	st	Z, r24
}
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <TIMERS_voidTimer0SetPreloadValue>:

void TIMERS_voidTimer0SetPreloadValue(u8 Copy_u8PreloadValue)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	0f 92       	push	r0
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value To The OCR0 Register*/
	TCNT0 = Copy_u8PreloadValue;
     ca4:	e2 e5       	ldi	r30, 0x52	; 82
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	80 83       	st	Z, r24
}
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <TIMERS_voidTimer0CTCSetCallBackFunction>:



void TIMERS_voidTimer0CTCSetCallBackFunction(void (*Copy_pvCTCFunction)(void))
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <TIMERS_voidTimer0CTCSetCallBackFunction+0x6>
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
	Global_pvCTCFunction = Copy_pvCTCFunction;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	90 93 79 00 	sts	0x0079, r25
     cca:	80 93 78 00 	sts	0x0078, r24
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <__vector_10>:

/*ISR For Timer 0 Compare Match*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	2f 93       	push	r18
     ce4:	3f 93       	push	r19
     ce6:	4f 93       	push	r20
     ce8:	5f 93       	push	r21
     cea:	6f 93       	push	r22
     cec:	7f 93       	push	r23
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	af 93       	push	r26
     cf4:	bf 93       	push	r27
     cf6:	ef 93       	push	r30
     cf8:	ff 93       	push	r31
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvCTCFunction != NULL)
     d02:	80 91 78 00 	lds	r24, 0x0078
     d06:	90 91 79 00 	lds	r25, 0x0079
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	29 f0       	breq	.+10     	; 0xd18 <__vector_10+0x40>
	{
		Global_pvCTCFunction();
     d0e:	e0 91 78 00 	lds	r30, 0x0078
     d12:	f0 91 79 00 	lds	r31, 0x0079
     d16:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <GIE_voidEnableGlobalInterrupt>:
#include "GIE_private.h"
#include "GIE_config.h"


void GIE_voidEnableGlobalInterrupt(void)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
     d46:	af e5       	ldi	r26, 0x5F	; 95
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ef e5       	ldi	r30, 0x5F	; 95
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	8c 93       	st	X, r24
}
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <GIE_voidDisableGlobalInterrupt>:

void GIE_voidDisableGlobalInterrupt(void)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
     d62:	af e5       	ldi	r26, 0x5F	; 95
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ef e5       	ldi	r30, 0x5F	; 95
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8f 77       	andi	r24, 0x7F	; 127
     d6e:	8c 93       	st	X, r24
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <EXTI_voidIntInit>:
#include "EXTI_config.h"

void (*Global_pvInt0NotificationFunction)(void) = NULL;

void EXTI_voidIntInit(void)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
    #if   EXTI_INT0_ENABLE == ENABLE
            /*Enable INT0*/
            SET_BIT(GICR, GICR_INT0);
     d7e:	ab e5       	ldi	r26, 0x5B	; 91
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	eb e5       	ldi	r30, 0x5B	; 91
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 64       	ori	r24, 0x40	; 64
     d8a:	8c 93       	st	X, r24
            /*Set INT0 Sense Control*/
            #if   EXTI_INT0_SENSE_CTRL == FALLING_EDGE
                    SET_BIT(MCUCR, MCUCR_ISC01);
     d8c:	a5 e5       	ldi	r26, 0x55	; 85
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e5 e5       	ldi	r30, 0x55	; 85
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	82 60       	ori	r24, 0x02	; 2
     d98:	8c 93       	st	X, r24
                    CLR_BIT(MCUCR, MCUCR_ISC00);
     d9a:	a5 e5       	ldi	r26, 0x55	; 85
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e5 e5       	ldi	r30, 0x55	; 85
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8e 7f       	andi	r24, 0xFE	; 254
     da6:	8c 93       	st	X, r24
        #error "EXTI_INT0_ENABLE Error Configuration"
    #endif
    
    
    #if   EXTI_INT1_ENABLE == ENABLE
            SET_BIT(GICR, GICR_INT1);
     da8:	ab e5       	ldi	r26, 0x5B	; 91
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e5       	ldi	r30, 0x5B	; 91
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	8c 93       	st	X, r24
    #else
        #error "EXTI_INT1_ENABLE Error Configuration"
    #endif
    
    #if   EXTI_INT2_ENABLE == ENABLE
            SET_BIT(GICR, GICR_INT2);
     db6:	ab e5       	ldi	r26, 0x5B	; 91
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e5       	ldi	r30, 0x5B	; 91
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 62       	ori	r24, 0x20	; 32
     dc2:	8c 93       	st	X, r24
    #elif EXTI_INT2_ENABLE == DISABLE
            CLR_BIT(GICR, GICR_INT2);
    #else
        #error "EXTI_INT2_ENABLE Error Configuration"
    #endif
}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <EXTI_voidSetInt0SenseControl>:


void EXTI_voidSetInt0SenseControl(u8 Copy_u8SenseControl)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <EXTI_voidSetInt0SenseControl+0x6>
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SenseControl)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	3b 83       	std	Y+3, r19	; 0x03
     de0:	2a 83       	std	Y+2, r18	; 0x02
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	91 05       	cpc	r25, r1
     dea:	21 f1       	breq	.+72     	; 0xe34 <EXTI_voidSetInt0SenseControl+0x6a>
     dec:	2a 81       	ldd	r18, Y+2	; 0x02
     dee:	3b 81       	ldd	r19, Y+3	; 0x03
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	31 05       	cpc	r19, r1
     df4:	2c f4       	brge	.+10     	; 0xe00 <EXTI_voidSetInt0SenseControl+0x36>
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	61 f0       	breq	.+24     	; 0xe16 <EXTI_voidSetInt0SenseControl+0x4c>
     dfe:	46 c0       	rjmp	.+140    	; 0xe8c <EXTI_voidSetInt0SenseControl+0xc2>
     e00:	2a 81       	ldd	r18, Y+2	; 0x02
     e02:	3b 81       	ldd	r19, Y+3	; 0x03
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	31 05       	cpc	r19, r1
     e08:	21 f1       	breq	.+72     	; 0xe52 <EXTI_voidSetInt0SenseControl+0x88>
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	9b 81       	ldd	r25, Y+3	; 0x03
     e0e:	83 30       	cpi	r24, 0x03	; 3
     e10:	91 05       	cpc	r25, r1
     e12:	71 f1       	breq	.+92     	; 0xe70 <EXTI_voidSetInt0SenseControl+0xa6>
     e14:	3b c0       	rjmp	.+118    	; 0xe8c <EXTI_voidSetInt0SenseControl+0xc2>
	{
		case FALLING_EDGE:
			SET_BIT(MCUCR, MCUCR_ISC01);
     e16:	a5 e5       	ldi	r26, 0x55	; 85
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e5 e5       	ldi	r30, 0x55	; 85
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	82 60       	ori	r24, 0x02	; 2
     e22:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
     e24:	a5 e5       	ldi	r26, 0x55	; 85
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e5 e5       	ldi	r30, 0x55	; 85
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8e 7f       	andi	r24, 0xFE	; 254
     e30:	8c 93       	st	X, r24
     e32:	2c c0       	rjmp	.+88     	; 0xe8c <EXTI_voidSetInt0SenseControl+0xc2>
		break;
		
		case RISING_EDGE:
			SET_BIT(MCUCR, MCUCR_ISC01);
     e34:	a5 e5       	ldi	r26, 0x55	; 85
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e5       	ldi	r30, 0x55	; 85
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
     e42:	a5 e5       	ldi	r26, 0x55	; 85
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e5 e5       	ldi	r30, 0x55	; 85
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	8c 93       	st	X, r24
     e50:	1d c0       	rjmp	.+58     	; 0xe8c <EXTI_voidSetInt0SenseControl+0xc2>
		break;
		
		case ON_CHANGE:
			CLR_BIT(MCUCR, MCUCR_ISC01);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8d 7f       	andi	r24, 0xFD	; 253
     e5e:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);	
     e60:	a5 e5       	ldi	r26, 0x55	; 85
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e5       	ldi	r30, 0x55	; 85
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
     e6e:	0e c0       	rjmp	.+28     	; 0xe8c <EXTI_voidSetInt0SenseControl+0xc2>
		break;
		
		case LOW_LEVEL:
			CLR_BIT(MCUCR, MCUCR_ISC01);
     e70:	a5 e5       	ldi	r26, 0x55	; 85
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e5 e5       	ldi	r30, 0x55	; 85
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8d 7f       	andi	r24, 0xFD	; 253
     e7c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);	
     e7e:	a5 e5       	ldi	r26, 0x55	; 85
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e5       	ldi	r30, 0x55	; 85
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8e 7f       	andi	r24, 0xFE	; 254
     e8a:	8c 93       	st	X, r24
		
		default:
			// Error To Be Displayed
		break;
	}
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <EXTI_voidSetInt1SenseControl>:

void EXTI_voidSetInt1SenseControl(u8 Copy_u8SenseControl)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <EXTI_voidSetInt1SenseControl+0x6>
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SenseControl)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3b 83       	std	Y+3, r19	; 0x03
     eae:	2a 83       	std	Y+2, r18	; 0x02
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	9b 81       	ldd	r25, Y+3	; 0x03
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	91 05       	cpc	r25, r1
     eb8:	21 f1       	breq	.+72     	; 0xf02 <EXTI_voidSetInt1SenseControl+0x6a>
     eba:	2a 81       	ldd	r18, Y+2	; 0x02
     ebc:	3b 81       	ldd	r19, Y+3	; 0x03
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	2c f4       	brge	.+10     	; 0xece <EXTI_voidSetInt1SenseControl+0x36>
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	9b 81       	ldd	r25, Y+3	; 0x03
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	61 f0       	breq	.+24     	; 0xee4 <EXTI_voidSetInt1SenseControl+0x4c>
     ecc:	46 c0       	rjmp	.+140    	; 0xf5a <EXTI_voidSetInt1SenseControl+0xc2>
     ece:	2a 81       	ldd	r18, Y+2	; 0x02
     ed0:	3b 81       	ldd	r19, Y+3	; 0x03
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	21 f1       	breq	.+72     	; 0xf20 <EXTI_voidSetInt1SenseControl+0x88>
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	91 05       	cpc	r25, r1
     ee0:	71 f1       	breq	.+92     	; 0xf3e <EXTI_voidSetInt1SenseControl+0xa6>
     ee2:	3b c0       	rjmp	.+118    	; 0xf5a <EXTI_voidSetInt1SenseControl+0xc2>
	{
		case FALLING_EDGE:
			SET_BIT(MCUCR, MCUCR_ISC11);
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC10);
     ef2:	a5 e5       	ldi	r26, 0x55	; 85
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e5       	ldi	r30, 0x55	; 85
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8b 7f       	andi	r24, 0xFB	; 251
     efe:	8c 93       	st	X, r24
     f00:	2c c0       	rjmp	.+88     	; 0xf5a <EXTI_voidSetInt1SenseControl+0xc2>
		break;
		
		case RISING_EDGE:
			SET_BIT(MCUCR, MCUCR_ISC11);
     f02:	a5 e5       	ldi	r26, 0x55	; 85
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e5 e5       	ldi	r30, 0x55	; 85
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);
     f10:	a5 e5       	ldi	r26, 0x55	; 85
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e5 e5       	ldi	r30, 0x55	; 85
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	84 60       	ori	r24, 0x04	; 4
     f1c:	8c 93       	st	X, r24
     f1e:	1d c0       	rjmp	.+58     	; 0xf5a <EXTI_voidSetInt1SenseControl+0xc2>
		break;
		
		case ON_CHANGE:
			CLR_BIT(MCUCR, MCUCR_ISC11);
     f20:	a5 e5       	ldi	r26, 0x55	; 85
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e5       	ldi	r30, 0x55	; 85
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);	
     f2e:	a5 e5       	ldi	r26, 0x55	; 85
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e5       	ldi	r30, 0x55	; 85
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	84 60       	ori	r24, 0x04	; 4
     f3a:	8c 93       	st	X, r24
     f3c:	0e c0       	rjmp	.+28     	; 0xf5a <EXTI_voidSetInt1SenseControl+0xc2>
		break;
		
		case LOW_LEVEL:
			CLR_BIT(MCUCR, MCUCR_ISC11);
     f3e:	a5 e5       	ldi	r26, 0x55	; 85
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e5       	ldi	r30, 0x55	; 85
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	87 7f       	andi	r24, 0xF7	; 247
     f4a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC10);	
     f4c:	a5 e5       	ldi	r26, 0x55	; 85
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e5       	ldi	r30, 0x55	; 85
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8b 7f       	andi	r24, 0xFB	; 251
     f58:	8c 93       	st	X, r24
		
		default:
			// Error To Be Displayed
		break;
	}
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <EXTI_voidSetInt2SenseControl>:

void EXTI_voidSetInt2SenseControl(u8 Copy_u8SenseControl)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <EXTI_voidSetInt2SenseControl+0x6>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8SenseControl)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3b 83       	std	Y+3, r19	; 0x03
     f7c:	2a 83       	std	Y+2, r18	; 0x02
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	9b 81       	ldd	r25, Y+3	; 0x03
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	31 f0       	breq	.+12     	; 0xf92 <EXTI_voidSetInt2SenseControl+0x2c>
     f86:	2a 81       	ldd	r18, Y+2	; 0x02
     f88:	3b 81       	ldd	r19, Y+3	; 0x03
     f8a:	21 30       	cpi	r18, 0x01	; 1
     f8c:	31 05       	cpc	r19, r1
     f8e:	49 f0       	breq	.+18     	; 0xfa2 <EXTI_voidSetInt2SenseControl+0x3c>
     f90:	0f c0       	rjmp	.+30     	; 0xfb0 <EXTI_voidSetInt2SenseControl+0x4a>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR, MCUCSR_ISC2);
     f92:	a4 e5       	ldi	r26, 0x54	; 84
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e4 e5       	ldi	r30, 0x54	; 84
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 7b       	andi	r24, 0xBF	; 191
     f9e:	8c 93       	st	X, r24
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <EXTI_voidSetInt2SenseControl+0x4a>
		break;
		
		case RISING_EDGE:
			SET_BIT(MCUCSR, MCUCSR_ISC2);
     fa2:	a4 e5       	ldi	r26, 0x54	; 84
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e4 e5       	ldi	r30, 0x54	; 84
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	8c 93       	st	X, r24
		
		default:
			// Error To Be Displayed
		break;
	}
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <EXTI_voidInt0Control>:
	}
}
***/

void EXTI_voidInt0Control(u8 Copy_u8Int0State)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <EXTI_voidInt0Control+0x6>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Int0State)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3b 83       	std	Y+3, r19	; 0x03
     fd2:	2a 83       	std	Y+2, r18	; 0x02
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f0       	breq	.+26     	; 0xff6 <EXTI_voidInt0Control+0x3a>
     fdc:	2a 81       	ldd	r18, Y+2	; 0x02
     fde:	3b 81       	ldd	r19, Y+3	; 0x03
     fe0:	21 30       	cpi	r18, 0x01	; 1
     fe2:	31 05       	cpc	r19, r1
     fe4:	79 f4       	brne	.+30     	; 0x1004 <EXTI_voidInt0Control+0x48>
	{
		case ENABLE:
			SET_BIT(GICR, GICR_INT0);
     fe6:	ab e5       	ldi	r26, 0x5B	; 91
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	eb e5       	ldi	r30, 0x5B	; 91
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	8c 93       	st	X, r24
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <EXTI_voidInt0Control+0x48>
		break;
		
		case DISABLE:
			CLR_BIT(GICR, GICR_INT0);
     ff6:	ab e5       	ldi	r26, 0x5B	; 91
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e5       	ldi	r30, 0x5B	; 91
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 7b       	andi	r24, 0xBF	; 191
    1002:	8c 93       	st	X, r24
		
		default:
		
		break;
	}
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <EXTI_voidInt1Control>:

void EXTI_voidInt1Control(u8 Copy_u8Int1State)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <EXTI_voidInt1Control+0x6>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Int1State)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3b 83       	std	Y+3, r19	; 0x03
    1026:	2a 83       	std	Y+2, r18	; 0x02
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f0       	breq	.+26     	; 0x104a <EXTI_voidInt1Control+0x3a>
    1030:	2a 81       	ldd	r18, Y+2	; 0x02
    1032:	3b 81       	ldd	r19, Y+3	; 0x03
    1034:	21 30       	cpi	r18, 0x01	; 1
    1036:	31 05       	cpc	r19, r1
    1038:	79 f4       	brne	.+30     	; 0x1058 <EXTI_voidInt1Control+0x48>
	{
		case ENABLE:
			SET_BIT(GICR, GICR_INT1);
    103a:	ab e5       	ldi	r26, 0x5B	; 91
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e5       	ldi	r30, 0x5B	; 91
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	8c 93       	st	X, r24
    1048:	07 c0       	rjmp	.+14     	; 0x1058 <EXTI_voidInt1Control+0x48>
		break;
		
		case DISABLE:
			CLR_BIT(GICR, GICR_INT1);
    104a:	ab e5       	ldi	r26, 0x5B	; 91
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e5       	ldi	r30, 0x5B	; 91
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8f 77       	andi	r24, 0x7F	; 127
    1056:	8c 93       	st	X, r24
		
		default:
		
		break;
	}
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <EXTI_voidInt2Control>:

void EXTI_voidInt2Control(u8 Copy_u8Int2State)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <EXTI_voidInt2Control+0x6>
    106a:	0f 92       	push	r0
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Int2State)
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	3b 83       	std	Y+3, r19	; 0x03
    107a:	2a 83       	std	Y+2, r18	; 0x02
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	9b 81       	ldd	r25, Y+3	; 0x03
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f0       	breq	.+26     	; 0x109e <EXTI_voidInt2Control+0x3a>
    1084:	2a 81       	ldd	r18, Y+2	; 0x02
    1086:	3b 81       	ldd	r19, Y+3	; 0x03
    1088:	21 30       	cpi	r18, 0x01	; 1
    108a:	31 05       	cpc	r19, r1
    108c:	79 f4       	brne	.+30     	; 0x10ac <EXTI_voidInt2Control+0x48>
	{
		case ENABLE:
			SET_BIT(GICR, GICR_INT2);
    108e:	ab e5       	ldi	r26, 0x5B	; 91
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e5       	ldi	r30, 0x5B	; 91
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 62       	ori	r24, 0x20	; 32
    109a:	8c 93       	st	X, r24
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <EXTI_voidInt2Control+0x48>
		break;
		
		case DISABLE:
			CLR_BIT(GICR, GICR_INT2);
    109e:	ab e5       	ldi	r26, 0x5B	; 91
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e5       	ldi	r30, 0x5B	; 91
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7d       	andi	r24, 0xDF	; 223
    10aa:	8c 93       	st	X, r24
		
		default:
		
		break;
	}
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <EXTI_voidInt0SetCallBack>:



void EXTI_voidInt0SetCallBack(void (*Copy_pvNotificationFunction)(void))
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <EXTI_voidInt0SetCallBack+0x6>
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
    Global_pvInt0NotificationFunction = Copy_pvNotificationFunction;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	90 93 7b 00 	sts	0x007B, r25
    10ce:	80 93 7a 00 	sts	0x007A, r24
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <__vector_1>:

/*ISR For INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    if(Global_pvInt0NotificationFunction != NULL)
    1106:	80 91 7a 00 	lds	r24, 0x007A
    110a:	90 91 7b 00 	lds	r25, 0x007B
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	29 f0       	breq	.+10     	; 0x111c <__vector_1+0x40>
    {
        Global_pvInt0NotificationFunction();
    1112:	e0 91 7a 00 	lds	r30, 0x007A
    1116:	f0 91 7b 00 	lds	r31, 0x007B
    111a:	09 95       	icall
    }
    else
    {
        /*Do Nothing*/
    }
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void  DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinState)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	2d 97       	sbiw	r28, 0x0d	; 13
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	6a 83       	std	Y+2, r22	; 0x02
    115a:	4b 83       	std	Y+3, r20	; 0x03
	if(  (Copy_u8PinNumber >= PIN0) && (Copy_u8PinNumber <= PIN7)  )
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	08 f0       	brcs	.+2      	; 0x1164 <DIO_voidSetPinDirection+0x22>
    1162:	01 c1       	rjmp	.+514    	; 0x1366 <DIO_voidSetPinDirection+0x224>
	{
		switch(Copy_u8PortName)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3d 87       	std	Y+13, r19	; 0x0d
    116c:	2c 87       	std	Y+12, r18	; 0x0c
    116e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1170:	9d 85       	ldd	r25, Y+13	; 0x0d
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <DIO_voidSetPinDirection+0x38>
    1178:	4f c0       	rjmp	.+158    	; 0x1218 <DIO_voidSetPinDirection+0xd6>
    117a:	2c 85       	ldd	r18, Y+12	; 0x0c
    117c:	3d 85       	ldd	r19, Y+13	; 0x0d
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	2c f4       	brge	.+10     	; 0x118e <DIO_voidSetPinDirection+0x4c>
    1184:	8c 85       	ldd	r24, Y+12	; 0x0c
    1186:	9d 85       	ldd	r25, Y+13	; 0x0d
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	71 f0       	breq	.+28     	; 0x11a8 <DIO_voidSetPinDirection+0x66>
    118c:	ec c0       	rjmp	.+472    	; 0x1366 <DIO_voidSetPinDirection+0x224>
    118e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1190:	3d 85       	ldd	r19, Y+13	; 0x0d
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <DIO_voidSetPinDirection+0x58>
    1198:	77 c0       	rjmp	.+238    	; 0x1288 <DIO_voidSetPinDirection+0x146>
    119a:	8c 85       	ldd	r24, Y+12	; 0x0c
    119c:	9d 85       	ldd	r25, Y+13	; 0x0d
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <DIO_voidSetPinDirection+0x64>
    11a4:	a9 c0       	rjmp	.+338    	; 0x12f8 <DIO_voidSetPinDirection+0x1b6>
    11a6:	df c0       	rjmp	.+446    	; 0x1366 <DIO_voidSetPinDirection+0x224>
		{
			case PORTA: 
				switch(Copy_u8PinState)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3b 87       	std	Y+11, r19	; 0x0b
    11b0:	2a 87       	std	Y+10, r18	; 0x0a
    11b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	31 f0       	breq	.+12     	; 0x11c6 <DIO_voidSetPinDirection+0x84>
    11ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    11bc:	3b 85       	ldd	r19, Y+11	; 0x0b
    11be:	21 30       	cpi	r18, 0x01	; 1
    11c0:	31 05       	cpc	r19, r1
    11c2:	b1 f0       	breq	.+44     	; 0x11f0 <DIO_voidSetPinDirection+0xae>
    11c4:	d0 c0       	rjmp	.+416    	; 0x1366 <DIO_voidSetPinDirection+0x224>
				{
					case INPUT:
						CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    11c6:	aa e3       	ldi	r26, 0x3A	; 58
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ea e3       	ldi	r30, 0x3A	; 58
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_voidSetPinDirection+0xa2>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_voidSetPinDirection+0x9e>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	bb c0       	rjmp	.+374    	; 0x1366 <DIO_voidSetPinDirection+0x224>
					break;
					case OUTPUT:
						SET_BIT(DIO_DDRA, Copy_u8PinNumber);
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_voidSetPinDirection+0xcc>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_voidSetPinDirection+0xc8>
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	a7 c0       	rjmp	.+334    	; 0x1366 <DIO_voidSetPinDirection+0x224>
					break;
				}
			break;
			
			case PORTB: 
				switch(Copy_u8PinState)
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	39 87       	std	Y+9, r19	; 0x09
    1220:	28 87       	std	Y+8, r18	; 0x08
    1222:	88 85       	ldd	r24, Y+8	; 0x08
    1224:	99 85       	ldd	r25, Y+9	; 0x09
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	31 f0       	breq	.+12     	; 0x1236 <DIO_voidSetPinDirection+0xf4>
    122a:	28 85       	ldd	r18, Y+8	; 0x08
    122c:	39 85       	ldd	r19, Y+9	; 0x09
    122e:	21 30       	cpi	r18, 0x01	; 1
    1230:	31 05       	cpc	r19, r1
    1232:	b1 f0       	breq	.+44     	; 0x1260 <DIO_voidSetPinDirection+0x11e>
    1234:	98 c0       	rjmp	.+304    	; 0x1366 <DIO_voidSetPinDirection+0x224>
				{
					case INPUT:
						CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    1236:	a7 e3       	ldi	r26, 0x37	; 55
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e7 e3       	ldi	r30, 0x37	; 55
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_voidSetPinDirection+0x112>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_voidSetPinDirection+0x10e>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	83 c0       	rjmp	.+262    	; 0x1366 <DIO_voidSetPinDirection+0x224>
					break;
					case OUTPUT:
						SET_BIT(DIO_DDRB, Copy_u8PinNumber);
    1260:	a7 e3       	ldi	r26, 0x37	; 55
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e7 e3       	ldi	r30, 0x37	; 55
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_voidSetPinDirection+0x13c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_voidSetPinDirection+0x138>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	6f c0       	rjmp	.+222    	; 0x1366 <DIO_voidSetPinDirection+0x224>
					break;
				}
			break;
			
			case PORTC: 
				switch(Copy_u8PinState)
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3f 83       	std	Y+7, r19	; 0x07
    1290:	2e 83       	std	Y+6, r18	; 0x06
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	9f 81       	ldd	r25, Y+7	; 0x07
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	31 f0       	breq	.+12     	; 0x12a6 <DIO_voidSetPinDirection+0x164>
    129a:	2e 81       	ldd	r18, Y+6	; 0x06
    129c:	3f 81       	ldd	r19, Y+7	; 0x07
    129e:	21 30       	cpi	r18, 0x01	; 1
    12a0:	31 05       	cpc	r19, r1
    12a2:	b1 f0       	breq	.+44     	; 0x12d0 <DIO_voidSetPinDirection+0x18e>
    12a4:	60 c0       	rjmp	.+192    	; 0x1366 <DIO_voidSetPinDirection+0x224>
				{
					case INPUT:
						CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    12a6:	a4 e3       	ldi	r26, 0x34	; 52
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e4 e3       	ldi	r30, 0x34	; 52
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_voidSetPinDirection+0x182>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_voidSetPinDirection+0x17e>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	4b c0       	rjmp	.+150    	; 0x1366 <DIO_voidSetPinDirection+0x224>
					break;
					case OUTPUT:
						SET_BIT(DIO_DDRC, Copy_u8PinNumber);
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_voidSetPinDirection+0x1ac>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_voidSetPinDirection+0x1a8>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	37 c0       	rjmp	.+110    	; 0x1366 <DIO_voidSetPinDirection+0x224>
					break;
				}
			break;
			
			case PORTD: 
				switch(Copy_u8PinState)
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	3d 83       	std	Y+5, r19	; 0x05
    1300:	2c 83       	std	Y+4, r18	; 0x04
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	31 f0       	breq	.+12     	; 0x1316 <DIO_voidSetPinDirection+0x1d4>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	21 30       	cpi	r18, 0x01	; 1
    1310:	31 05       	cpc	r19, r1
    1312:	b1 f0       	breq	.+44     	; 0x1340 <DIO_voidSetPinDirection+0x1fe>
    1314:	28 c0       	rjmp	.+80     	; 0x1366 <DIO_voidSetPinDirection+0x224>
				{
					case INPUT:
						CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    1316:	a1 e3       	ldi	r26, 0x31	; 49
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e1 e3       	ldi	r30, 0x31	; 49
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_voidSetPinDirection+0x1f2>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_voidSetPinDirection+0x1ee>
    1338:	80 95       	com	r24
    133a:	84 23       	and	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	13 c0       	rjmp	.+38     	; 0x1366 <DIO_voidSetPinDirection+0x224>
					break;
					case OUTPUT:
						SET_BIT(DIO_DDRD, Copy_u8PinNumber);
    1340:	a1 e3       	ldi	r26, 0x31	; 49
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e1 e3       	ldi	r30, 0x31	; 49
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_voidSetPinDirection+0x21c>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_voidSetPinDirection+0x218>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    1366:	2d 96       	adiw	r28, 0x0d	; 13
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	2d 97       	sbiw	r28, 0x0d	; 13
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	6a 83       	std	Y+2, r22	; 0x02
    1390:	4b 83       	std	Y+3, r20	; 0x03
	if( (Copy_u8PinNumber >= PIN0 ) && (Copy_u8PinNumber <= PIN7) )
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	88 30       	cpi	r24, 0x08	; 8
    1396:	08 f0       	brcs	.+2      	; 0x139a <DIO_voidSetPinValue+0x22>
    1398:	00 c1       	rjmp	.+512    	; 0x159a <DIO_voidSetPinValue+0x222>
	{
		switch(Copy_u8PortName)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3d 87       	std	Y+13, r19	; 0x0d
    13a2:	2c 87       	std	Y+12, r18	; 0x0c
    13a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <DIO_voidSetPinValue+0x38>
    13ae:	4f c0       	rjmp	.+158    	; 0x144e <DIO_voidSetPinValue+0xd6>
    13b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <DIO_voidSetPinValue+0x4c>
    13ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    13bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	71 f0       	breq	.+28     	; 0x13de <DIO_voidSetPinValue+0x66>
    13c2:	eb c0       	rjmp	.+470    	; 0x159a <DIO_voidSetPinValue+0x222>
    13c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    13c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_voidSetPinValue+0x58>
    13ce:	77 c0       	rjmp	.+238    	; 0x14be <DIO_voidSetPinValue+0x146>
    13d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_voidSetPinValue+0x64>
    13da:	a9 c0       	rjmp	.+338    	; 0x152e <DIO_voidSetPinValue+0x1b6>
    13dc:	de c0       	rjmp	.+444    	; 0x159a <DIO_voidSetPinValue+0x222>
		{
			case PORTA:
				switch(Copy_u8PinValue)
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3b 87       	std	Y+11, r19	; 0x0b
    13e6:	2a 87       	std	Y+10, r18	; 0x0a
    13e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	d1 f0       	breq	.+52     	; 0x1424 <DIO_voidSetPinValue+0xac>
    13f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    13f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    13f4:	21 30       	cpi	r18, 0x01	; 1
    13f6:	31 05       	cpc	r19, r1
    13f8:	09 f0       	breq	.+2      	; 0x13fc <DIO_voidSetPinValue+0x84>
    13fa:	cf c0       	rjmp	.+414    	; 0x159a <DIO_voidSetPinValue+0x222>
				{
					case HIGH:
						SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    13fc:	ab e3       	ldi	r26, 0x3B	; 59
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	eb e3       	ldi	r30, 0x3B	; 59
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_voidSetPinValue+0xa2>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_voidSetPinValue+0x9e>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	bb c0       	rjmp	.+374    	; 0x159a <DIO_voidSetPinValue+0x222>
					break;
					case LOW:
						CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_voidSetPinValue+0xca>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_voidSetPinValue+0xc6>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	a6 c0       	rjmp	.+332    	; 0x159a <DIO_voidSetPinValue+0x222>
					break;
				}
			break;
			case PORTB:
				switch(Copy_u8PinValue)
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	39 87       	std	Y+9, r19	; 0x09
    1456:	28 87       	std	Y+8, r18	; 0x08
    1458:	88 85       	ldd	r24, Y+8	; 0x08
    145a:	99 85       	ldd	r25, Y+9	; 0x09
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	d1 f0       	breq	.+52     	; 0x1494 <DIO_voidSetPinValue+0x11c>
    1460:	28 85       	ldd	r18, Y+8	; 0x08
    1462:	39 85       	ldd	r19, Y+9	; 0x09
    1464:	21 30       	cpi	r18, 0x01	; 1
    1466:	31 05       	cpc	r19, r1
    1468:	09 f0       	breq	.+2      	; 0x146c <DIO_voidSetPinValue+0xf4>
    146a:	97 c0       	rjmp	.+302    	; 0x159a <DIO_voidSetPinValue+0x222>
				{
					case HIGH:
						SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    146c:	a8 e3       	ldi	r26, 0x38	; 56
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e8 e3       	ldi	r30, 0x38	; 56
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_voidSetPinValue+0x112>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_voidSetPinValue+0x10e>
    148e:	84 2b       	or	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	83 c0       	rjmp	.+262    	; 0x159a <DIO_voidSetPinValue+0x222>
					break;
					case LOW:
						CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    1494:	a8 e3       	ldi	r26, 0x38	; 56
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e8 e3       	ldi	r30, 0x38	; 56
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_voidSetPinValue+0x13a>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_voidSetPinValue+0x136>
    14b6:	80 95       	com	r24
    14b8:	84 23       	and	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	6e c0       	rjmp	.+220    	; 0x159a <DIO_voidSetPinValue+0x222>
					break;
				}
			break;
			case PORTC:
				switch(Copy_u8PinValue)
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3f 83       	std	Y+7, r19	; 0x07
    14c6:	2e 83       	std	Y+6, r18	; 0x06
    14c8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ca:	9f 81       	ldd	r25, Y+7	; 0x07
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	d1 f0       	breq	.+52     	; 0x1504 <DIO_voidSetPinValue+0x18c>
    14d0:	2e 81       	ldd	r18, Y+6	; 0x06
    14d2:	3f 81       	ldd	r19, Y+7	; 0x07
    14d4:	21 30       	cpi	r18, 0x01	; 1
    14d6:	31 05       	cpc	r19, r1
    14d8:	09 f0       	breq	.+2      	; 0x14dc <DIO_voidSetPinValue+0x164>
    14da:	5f c0       	rjmp	.+190    	; 0x159a <DIO_voidSetPinValue+0x222>
				{
					case HIGH:
						SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    14dc:	a5 e3       	ldi	r26, 0x35	; 53
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e3       	ldi	r30, 0x35	; 53
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_voidSetPinValue+0x182>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <DIO_voidSetPinValue+0x17e>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	4b c0       	rjmp	.+150    	; 0x159a <DIO_voidSetPinValue+0x222>
					break;
					case LOW:
						CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    1504:	a5 e3       	ldi	r26, 0x35	; 53
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e3       	ldi	r30, 0x35	; 53
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_voidSetPinValue+0x1aa>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_voidSetPinValue+0x1a6>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	36 c0       	rjmp	.+108    	; 0x159a <DIO_voidSetPinValue+0x222>
					break;
				}
			break;
			case PORTD:
				switch(Copy_u8PinValue)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3d 83       	std	Y+5, r19	; 0x05
    1536:	2c 83       	std	Y+4, r18	; 0x04
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	c9 f0       	breq	.+50     	; 0x1572 <DIO_voidSetPinValue+0x1fa>
    1540:	2c 81       	ldd	r18, Y+4	; 0x04
    1542:	3d 81       	ldd	r19, Y+5	; 0x05
    1544:	21 30       	cpi	r18, 0x01	; 1
    1546:	31 05       	cpc	r19, r1
    1548:	41 f5       	brne	.+80     	; 0x159a <DIO_voidSetPinValue+0x222>
				{
					case HIGH:
						SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    154a:	a2 e3       	ldi	r26, 0x32	; 50
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_voidSetPinValue+0x1f0>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_voidSetPinValue+0x1ec>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	14 c0       	rjmp	.+40     	; 0x159a <DIO_voidSetPinValue+0x222>
					break;
					case LOW:
						CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    1572:	a2 e3       	ldi	r26, 0x32	; 50
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e2 e3       	ldi	r30, 0x32	; 50
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_voidSetPinValue+0x218>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_voidSetPinValue+0x214>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    159a:	2d 96       	adiw	r28, 0x0d	; 13
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_u8GetPinValue+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <DIO_u8GetPinValue+0x8>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	8a 83       	std	Y+2, r24	; 0x02
    15bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3d 83       	std	Y+5, r19	; 0x05
    15c6:	2c 83       	std	Y+4, r18	; 0x04
    15c8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ca:	5d 81       	ldd	r21, Y+5	; 0x05
    15cc:	41 30       	cpi	r20, 0x01	; 1
    15ce:	51 05       	cpc	r21, r1
    15d0:	41 f1       	breq	.+80     	; 0x1622 <DIO_u8GetPinValue+0x76>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	91 05       	cpc	r25, r1
    15da:	34 f4       	brge	.+12     	; 0x15e8 <DIO_u8GetPinValue+0x3c>
    15dc:	2c 81       	ldd	r18, Y+4	; 0x04
    15de:	3d 81       	ldd	r19, Y+5	; 0x05
    15e0:	21 15       	cp	r18, r1
    15e2:	31 05       	cpc	r19, r1
    15e4:	61 f0       	breq	.+24     	; 0x15fe <DIO_u8GetPinValue+0x52>
    15e6:	52 c0       	rjmp	.+164    	; 0x168c <DIO_u8GetPinValue+0xe0>
    15e8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ea:	5d 81       	ldd	r21, Y+5	; 0x05
    15ec:	42 30       	cpi	r20, 0x02	; 2
    15ee:	51 05       	cpc	r21, r1
    15f0:	51 f1       	breq	.+84     	; 0x1646 <DIO_u8GetPinValue+0x9a>
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	b9 f1       	breq	.+110    	; 0x166a <DIO_u8GetPinValue+0xbe>
    15fc:	47 c0       	rjmp	.+142    	; 0x168c <DIO_u8GetPinValue+0xe0>
	{
		case PORTA:
			Local_u8PinValue = GET_BIT(DIO_PINA, Copy_u8PinNumber);
    15fe:	e9 e3       	ldi	r30, 0x39	; 57
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_u8GetPinValue+0x6a>
    1612:	55 95       	asr	r21
    1614:	47 95       	ror	r20
    1616:	8a 95       	dec	r24
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_u8GetPinValue+0x66>
    161a:	ca 01       	movw	r24, r20
    161c:	81 70       	andi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	35 c0       	rjmp	.+106    	; 0x168c <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTB:
			Local_u8PinValue = GET_BIT(DIO_PINB, Copy_u8PinNumber);
    1622:	e6 e3       	ldi	r30, 0x36	; 54
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a9 01       	movw	r20, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_u8GetPinValue+0x8e>
    1636:	55 95       	asr	r21
    1638:	47 95       	ror	r20
    163a:	8a 95       	dec	r24
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_u8GetPinValue+0x8a>
    163e:	ca 01       	movw	r24, r20
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	23 c0       	rjmp	.+70     	; 0x168c <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTC:
			Local_u8PinValue = GET_BIT(DIO_PINC, Copy_u8PinNumber);
    1646:	e3 e3       	ldi	r30, 0x33	; 51
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_u8GetPinValue+0xb2>
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_u8GetPinValue+0xae>
    1662:	ca 01       	movw	r24, r20
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	11 c0       	rjmp	.+34     	; 0x168c <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTD:
			Local_u8PinValue = GET_BIT(DIO_PIND, Copy_u8PinNumber);
    166a:	e0 e3       	ldi	r30, 0x30	; 48
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a9 01       	movw	r20, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_u8GetPinValue+0xd6>
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_u8GetPinValue+0xd2>
    1686:	ca 01       	movw	r24, r20
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
		default:
			/*Do Nothing*/
		break;
	}
	
	return Local_u8PinValue;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <DIO_voidSetPortDirection>:



void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortState)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	2c 97       	sbiw	r28, 0x0c	; 12
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	3c 87       	std	Y+12, r19	; 0x0c
    16be:	2b 87       	std	Y+11, r18	; 0x0b
    16c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	91 05       	cpc	r25, r1
    16c8:	71 f1       	breq	.+92     	; 0x1726 <DIO_voidSetPortDirection+0x88>
    16ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    16cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	31 05       	cpc	r19, r1
    16d2:	2c f4       	brge	.+10     	; 0x16de <DIO_voidSetPortDirection+0x40>
    16d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	69 f0       	breq	.+26     	; 0x16f6 <DIO_voidSetPortDirection+0x58>
    16dc:	6b c0       	rjmp	.+214    	; 0x17b4 <DIO_voidSetPortDirection+0x116>
    16de:	2b 85       	ldd	r18, Y+11	; 0x0b
    16e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	b9 f1       	breq	.+110    	; 0x1756 <DIO_voidSetPortDirection+0xb8>
    16e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ec:	83 30       	cpi	r24, 0x03	; 3
    16ee:	91 05       	cpc	r25, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <DIO_voidSetPortDirection+0x56>
    16f2:	49 c0       	rjmp	.+146    	; 0x1786 <DIO_voidSetPortDirection+0xe8>
    16f4:	5f c0       	rjmp	.+190    	; 0x17b4 <DIO_voidSetPortDirection+0x116>
	{
		case PORTA:
			switch(Copy_u8PortState)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3a 87       	std	Y+10, r19	; 0x0a
    16fe:	29 87       	std	Y+9, r18	; 0x09
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	31 f0       	breq	.+12     	; 0x1714 <DIO_voidSetPortDirection+0x76>
    1708:	29 85       	ldd	r18, Y+9	; 0x09
    170a:	3a 85       	ldd	r19, Y+10	; 0x0a
    170c:	21 30       	cpi	r18, 0x01	; 1
    170e:	31 05       	cpc	r19, r1
    1710:	29 f0       	breq	.+10     	; 0x171c <DIO_voidSetPortDirection+0x7e>
    1712:	50 c0       	rjmp	.+160    	; 0x17b4 <DIO_voidSetPortDirection+0x116>
			{
					case INPUT:
							DIO_DDRA = ALL_INPUT;
    1714:	ea e3       	ldi	r30, 0x3A	; 58
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	10 82       	st	Z, r1
    171a:	4c c0       	rjmp	.+152    	; 0x17b4 <DIO_voidSetPortDirection+0x116>
					break;
					case OUTPUT:
							DIO_DDRA = ALL_OUTPUT;
    171c:	ea e3       	ldi	r30, 0x3A	; 58
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	80 83       	st	Z, r24
    1724:	47 c0       	rjmp	.+142    	; 0x17b4 <DIO_voidSetPortDirection+0x116>
					break;
			}
		break;
		
		case PORTB:
			switch(Copy_u8PortState)
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	38 87       	std	Y+8, r19	; 0x08
    172e:	2f 83       	std	Y+7, r18	; 0x07
    1730:	8f 81       	ldd	r24, Y+7	; 0x07
    1732:	98 85       	ldd	r25, Y+8	; 0x08
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	31 f0       	breq	.+12     	; 0x1744 <DIO_voidSetPortDirection+0xa6>
    1738:	2f 81       	ldd	r18, Y+7	; 0x07
    173a:	38 85       	ldd	r19, Y+8	; 0x08
    173c:	21 30       	cpi	r18, 0x01	; 1
    173e:	31 05       	cpc	r19, r1
    1740:	29 f0       	breq	.+10     	; 0x174c <DIO_voidSetPortDirection+0xae>
    1742:	38 c0       	rjmp	.+112    	; 0x17b4 <DIO_voidSetPortDirection+0x116>
			{
					case INPUT:
							DIO_DDRB = ALL_INPUT;
    1744:	e7 e3       	ldi	r30, 0x37	; 55
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	10 82       	st	Z, r1
    174a:	34 c0       	rjmp	.+104    	; 0x17b4 <DIO_voidSetPortDirection+0x116>
					break;
					case OUTPUT:
							DIO_DDRB = ALL_OUTPUT;
    174c:	e7 e3       	ldi	r30, 0x37	; 55
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	80 83       	st	Z, r24
    1754:	2f c0       	rjmp	.+94     	; 0x17b4 <DIO_voidSetPortDirection+0x116>
					break;
			}
		break;
		
		case PORTC:
			switch(Copy_u8PortState)
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3e 83       	std	Y+6, r19	; 0x06
    175e:	2d 83       	std	Y+5, r18	; 0x05
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	31 f0       	breq	.+12     	; 0x1774 <DIO_voidSetPortDirection+0xd6>
    1768:	2d 81       	ldd	r18, Y+5	; 0x05
    176a:	3e 81       	ldd	r19, Y+6	; 0x06
    176c:	21 30       	cpi	r18, 0x01	; 1
    176e:	31 05       	cpc	r19, r1
    1770:	29 f0       	breq	.+10     	; 0x177c <DIO_voidSetPortDirection+0xde>
    1772:	20 c0       	rjmp	.+64     	; 0x17b4 <DIO_voidSetPortDirection+0x116>
			{
					case INPUT:
							DIO_DDRC = ALL_INPUT;
    1774:	e4 e3       	ldi	r30, 0x34	; 52
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
    177a:	1c c0       	rjmp	.+56     	; 0x17b4 <DIO_voidSetPortDirection+0x116>
					break;
					case OUTPUT:
							DIO_DDRC = ALL_OUTPUT;
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	80 83       	st	Z, r24
    1784:	17 c0       	rjmp	.+46     	; 0x17b4 <DIO_voidSetPortDirection+0x116>
					break;
			}
		break;
		
		case PORTD:
			switch(Copy_u8PortState)
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3c 83       	std	Y+4, r19	; 0x04
    178e:	2b 83       	std	Y+3, r18	; 0x03
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	31 f0       	breq	.+12     	; 0x17a4 <DIO_voidSetPortDirection+0x106>
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	21 30       	cpi	r18, 0x01	; 1
    179e:	31 05       	cpc	r19, r1
    17a0:	29 f0       	breq	.+10     	; 0x17ac <DIO_voidSetPortDirection+0x10e>
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <DIO_voidSetPortDirection+0x116>
			{
					case INPUT:
							DIO_DDRD = ALL_INPUT;
    17a4:	e1 e3       	ldi	r30, 0x31	; 49
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	10 82       	st	Z, r1
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <DIO_voidSetPortDirection+0x116>
					break;
					case OUTPUT:
							DIO_DDRD = ALL_OUTPUT;
    17ac:	e1 e3       	ldi	r30, 0x31	; 49
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	80 83       	st	Z, r24
					break;
			}
		break;
	}
}
    17b4:	2c 96       	adiw	r28, 0x0c	; 12
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <DIO_voidSetPortValue>:



void DIO_voidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	2c 97       	sbiw	r28, 0x0c	; 12
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3c 87       	std	Y+12, r19	; 0x0c
    17e6:	2b 87       	std	Y+11, r18	; 0x0b
    17e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	71 f1       	breq	.+92     	; 0x184e <DIO_voidSetPortValue+0x88>
    17f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    17f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	2c f4       	brge	.+10     	; 0x1806 <DIO_voidSetPortValue+0x40>
    17fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	69 f0       	breq	.+26     	; 0x181e <DIO_voidSetPortValue+0x58>
    1804:	6b c0       	rjmp	.+214    	; 0x18dc <DIO_voidSetPortValue+0x116>
    1806:	2b 85       	ldd	r18, Y+11	; 0x0b
    1808:	3c 85       	ldd	r19, Y+12	; 0x0c
    180a:	22 30       	cpi	r18, 0x02	; 2
    180c:	31 05       	cpc	r19, r1
    180e:	b9 f1       	breq	.+110    	; 0x187e <DIO_voidSetPortValue+0xb8>
    1810:	8b 85       	ldd	r24, Y+11	; 0x0b
    1812:	9c 85       	ldd	r25, Y+12	; 0x0c
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	91 05       	cpc	r25, r1
    1818:	09 f4       	brne	.+2      	; 0x181c <DIO_voidSetPortValue+0x56>
    181a:	49 c0       	rjmp	.+146    	; 0x18ae <DIO_voidSetPortValue+0xe8>
    181c:	5f c0       	rjmp	.+190    	; 0x18dc <DIO_voidSetPortValue+0x116>
	{
		case PORTA:
			switch(Copy_u8PortValue)
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3a 87       	std	Y+10, r19	; 0x0a
    1826:	29 87       	std	Y+9, r18	; 0x09
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	31 f0       	breq	.+12     	; 0x183c <DIO_voidSetPortValue+0x76>
    1830:	29 85       	ldd	r18, Y+9	; 0x09
    1832:	3a 85       	ldd	r19, Y+10	; 0x0a
    1834:	21 30       	cpi	r18, 0x01	; 1
    1836:	31 05       	cpc	r19, r1
    1838:	29 f0       	breq	.+10     	; 0x1844 <DIO_voidSetPortValue+0x7e>
    183a:	50 c0       	rjmp	.+160    	; 0x18dc <DIO_voidSetPortValue+0x116>
			{
					case LOW:
							DIO_PORTA = ALL_LOW;
    183c:	eb e3       	ldi	r30, 0x3B	; 59
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	10 82       	st	Z, r1
    1842:	4c c0       	rjmp	.+152    	; 0x18dc <DIO_voidSetPortValue+0x116>
					break;
					case HIGH:
							DIO_PORTA = ALL_HIGH;
    1844:	eb e3       	ldi	r30, 0x3B	; 59
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8f ef       	ldi	r24, 0xFF	; 255
    184a:	80 83       	st	Z, r24
    184c:	47 c0       	rjmp	.+142    	; 0x18dc <DIO_voidSetPortValue+0x116>
					break;
			}
		break;
		
		case PORTB:
			switch(Copy_u8PortValue)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	38 87       	std	Y+8, r19	; 0x08
    1856:	2f 83       	std	Y+7, r18	; 0x07
    1858:	8f 81       	ldd	r24, Y+7	; 0x07
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	31 f0       	breq	.+12     	; 0x186c <DIO_voidSetPortValue+0xa6>
    1860:	2f 81       	ldd	r18, Y+7	; 0x07
    1862:	38 85       	ldd	r19, Y+8	; 0x08
    1864:	21 30       	cpi	r18, 0x01	; 1
    1866:	31 05       	cpc	r19, r1
    1868:	29 f0       	breq	.+10     	; 0x1874 <DIO_voidSetPortValue+0xae>
    186a:	38 c0       	rjmp	.+112    	; 0x18dc <DIO_voidSetPortValue+0x116>
			{
					case LOW:
							DIO_PORTB = ALL_LOW;
    186c:	e8 e3       	ldi	r30, 0x38	; 56
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	10 82       	st	Z, r1
    1872:	34 c0       	rjmp	.+104    	; 0x18dc <DIO_voidSetPortValue+0x116>
					break;
					case HIGH:
							DIO_PORTB = ALL_HIGH;
    1874:	e8 e3       	ldi	r30, 0x38	; 56
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	80 83       	st	Z, r24
    187c:	2f c0       	rjmp	.+94     	; 0x18dc <DIO_voidSetPortValue+0x116>
					break;
			}
		break;
		
		case PORTC:
			switch(Copy_u8PortValue)
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3e 83       	std	Y+6, r19	; 0x06
    1886:	2d 83       	std	Y+5, r18	; 0x05
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	31 f0       	breq	.+12     	; 0x189c <DIO_voidSetPortValue+0xd6>
    1890:	2d 81       	ldd	r18, Y+5	; 0x05
    1892:	3e 81       	ldd	r19, Y+6	; 0x06
    1894:	21 30       	cpi	r18, 0x01	; 1
    1896:	31 05       	cpc	r19, r1
    1898:	29 f0       	breq	.+10     	; 0x18a4 <DIO_voidSetPortValue+0xde>
    189a:	20 c0       	rjmp	.+64     	; 0x18dc <DIO_voidSetPortValue+0x116>
			{
					case LOW:
							DIO_PORTC = ALL_LOW;
    189c:	e5 e3       	ldi	r30, 0x35	; 53
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	10 82       	st	Z, r1
    18a2:	1c c0       	rjmp	.+56     	; 0x18dc <DIO_voidSetPortValue+0x116>
					break;
					case HIGH:
							DIO_PORTC = ALL_HIGH;
    18a4:	e5 e3       	ldi	r30, 0x35	; 53
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	80 83       	st	Z, r24
    18ac:	17 c0       	rjmp	.+46     	; 0x18dc <DIO_voidSetPortValue+0x116>
					break;
			}
		break;
		
		case PORTD:
			switch(Copy_u8PortValue)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3c 83       	std	Y+4, r19	; 0x04
    18b6:	2b 83       	std	Y+3, r18	; 0x03
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	31 f0       	breq	.+12     	; 0x18cc <DIO_voidSetPortValue+0x106>
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	21 30       	cpi	r18, 0x01	; 1
    18c6:	31 05       	cpc	r19, r1
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <DIO_voidSetPortValue+0x10e>
    18ca:	08 c0       	rjmp	.+16     	; 0x18dc <DIO_voidSetPortValue+0x116>
			{
					case LOW:
							DIO_PORTD = ALL_LOW;
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	10 82       	st	Z, r1
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <DIO_voidSetPortValue+0x116>
					break;
					case HIGH:
							DIO_PORTD = ALL_HIGH;
    18d4:	e2 e3       	ldi	r30, 0x32	; 50
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	80 83       	st	Z, r24
					break;
			}
		break;
	}
}
    18dc:	2c 96       	adiw	r28, 0x0c	; 12
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <DIO_voidSetPortSpecificDirection>:


void DIO_voidSetPortSpecificDirection(u8 Copy_u8PortName, u8 Copy_u8PortDirection)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <DIO_voidSetPortSpecificDirection+0x6>
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <DIO_voidSetPortSpecificDirection+0x8>
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	6a 83       	std	Y+2, r22	; 0x02
	if( (Copy_u8PortDirection >= 0) && (Copy_u8PortDirection <= 255) )
	{
		switch(Copy_u8PortName)
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	3c 83       	std	Y+4, r19	; 0x04
    1906:	2b 83       	std	Y+3, r18	; 0x03
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	91 05       	cpc	r25, r1
    1910:	d1 f0       	breq	.+52     	; 0x1946 <DIO_voidSetPortSpecificDirection+0x58>
    1912:	2b 81       	ldd	r18, Y+3	; 0x03
    1914:	3c 81       	ldd	r19, Y+4	; 0x04
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	2c f4       	brge	.+10     	; 0x1926 <DIO_voidSetPortSpecificDirection+0x38>
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	61 f0       	breq	.+24     	; 0x193c <DIO_voidSetPortSpecificDirection+0x4e>
    1924:	1e c0       	rjmp	.+60     	; 0x1962 <DIO_voidSetPortSpecificDirection+0x74>
    1926:	2b 81       	ldd	r18, Y+3	; 0x03
    1928:	3c 81       	ldd	r19, Y+4	; 0x04
    192a:	22 30       	cpi	r18, 0x02	; 2
    192c:	31 05       	cpc	r19, r1
    192e:	81 f0       	breq	.+32     	; 0x1950 <DIO_voidSetPortSpecificDirection+0x62>
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	81 f0       	breq	.+32     	; 0x195a <DIO_voidSetPortSpecificDirection+0x6c>
    193a:	13 c0       	rjmp	.+38     	; 0x1962 <DIO_voidSetPortSpecificDirection+0x74>
		{
			case PORTA:
				DIO_DDRA = Copy_u8PortDirection;
    193c:	ea e3       	ldi	r30, 0x3A	; 58
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	80 83       	st	Z, r24
    1944:	0e c0       	rjmp	.+28     	; 0x1962 <DIO_voidSetPortSpecificDirection+0x74>
			break;
			
			case PORTB:
				DIO_DDRB = Copy_u8PortDirection;
    1946:	e7 e3       	ldi	r30, 0x37	; 55
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	80 83       	st	Z, r24
    194e:	09 c0       	rjmp	.+18     	; 0x1962 <DIO_voidSetPortSpecificDirection+0x74>
			break;
			
			case PORTC:
				DIO_DDRC = Copy_u8PortDirection;
    1950:	e4 e3       	ldi	r30, 0x34	; 52
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	80 83       	st	Z, r24
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <DIO_voidSetPortSpecificDirection+0x74>
			break;
		
			case PORTD:
				DIO_DDRD = Copy_u8PortDirection;
    195a:	e1 e3       	ldi	r30, 0x31	; 49
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 83       	st	Z, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <DIO_voidSetPortSpecificValue>:


void DIO_voidSetPortSpecificValue(u8 Copy_u8PortName, u8 Copy_u8PortValue)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	00 d0       	rcall	.+0      	; 0x1976 <DIO_voidSetPortSpecificValue+0x6>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <DIO_voidSetPortSpecificValue+0x8>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	6a 83       	std	Y+2, r22	; 0x02
	if( (Copy_u8PortValue >= 0) && (Copy_u8PortValue <= 255) )
	{
		switch(Copy_u8PortName)
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3c 83       	std	Y+4, r19	; 0x04
    1988:	2b 83       	std	Y+3, r18	; 0x03
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	91 05       	cpc	r25, r1
    1992:	d1 f0       	breq	.+52     	; 0x19c8 <DIO_voidSetPortSpecificValue+0x58>
    1994:	2b 81       	ldd	r18, Y+3	; 0x03
    1996:	3c 81       	ldd	r19, Y+4	; 0x04
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	2c f4       	brge	.+10     	; 0x19a8 <DIO_voidSetPortSpecificValue+0x38>
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	61 f0       	breq	.+24     	; 0x19be <DIO_voidSetPortSpecificValue+0x4e>
    19a6:	1e c0       	rjmp	.+60     	; 0x19e4 <DIO_voidSetPortSpecificValue+0x74>
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	81 f0       	breq	.+32     	; 0x19d2 <DIO_voidSetPortSpecificValue+0x62>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	83 30       	cpi	r24, 0x03	; 3
    19b8:	91 05       	cpc	r25, r1
    19ba:	81 f0       	breq	.+32     	; 0x19dc <DIO_voidSetPortSpecificValue+0x6c>
    19bc:	13 c0       	rjmp	.+38     	; 0x19e4 <DIO_voidSetPortSpecificValue+0x74>
		{
			case PORTA:
				DIO_PORTA = Copy_u8PortValue;
    19be:	eb e3       	ldi	r30, 0x3B	; 59
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 83       	st	Z, r24
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <DIO_voidSetPortSpecificValue+0x74>
			break;
			
			case PORTB:
				DIO_PORTB = Copy_u8PortValue;
    19c8:	e8 e3       	ldi	r30, 0x38	; 56
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 83       	st	Z, r24
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <DIO_voidSetPortSpecificValue+0x74>
			break;
			
			case PORTC:
				DIO_PORTC = Copy_u8PortValue;
    19d2:	e5 e3       	ldi	r30, 0x35	; 53
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	80 83       	st	Z, r24
    19da:	04 c0       	rjmp	.+8      	; 0x19e4 <DIO_voidSetPortSpecificValue+0x74>
			break;
		
			case PORTD:
				DIO_PORTD = Copy_u8PortValue;
    19dc:	e2 e3       	ldi	r30, 0x32	; 50
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	80 83       	st	Z, r24
	}
	else
	{
		/*Do Nothing*/
	}
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <ADC_voidInit>:
void (*Global_pvNotificationFunction)(void) = NULL;
u8 ADC_u8Result;
u8 ADC_u8BusyState = NOTBUSY;

void ADC_voidInit(void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	/*Set AREF To Be AVCC*/
	CLR_BIT(ADMUX, ADMUX_REFS1);
    19fa:	a7 e2       	ldi	r26, 0x27	; 39
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e7 e2       	ldi	r30, 0x27	; 39
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8f 77       	andi	r24, 0x7F	; 127
    1a06:	8c 93       	st	X, r24
	SET_BIT(ADMUX, ADMUX_REFS0);
    1a08:	a7 e2       	ldi	r26, 0x27	; 39
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e7 e2       	ldi	r30, 0x27	; 39
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 64       	ori	r24, 0x40	; 64
    1a14:	8c 93       	st	X, r24
	
	/*Set The Left Adjust*/
	SET_BIT(ADMUX, ADMUX_ADLAR);
    1a16:	a7 e2       	ldi	r26, 0x27	; 39
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e7 e2       	ldi	r30, 0x27	; 39
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 62       	ori	r24, 0x20	; 32
    1a22:	8c 93       	st	X, r24

	/*Set The Prescaler To Be = 64*/
	ADCSRA &= PRESCALER_MASK;
    1a24:	a6 e2       	ldi	r26, 0x26	; 38
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e6 e2       	ldi	r30, 0x26	; 38
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 7f       	andi	r24, 0xF8	; 248
    1a30:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER;
    1a32:	a6 e2       	ldi	r26, 0x26	; 38
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e6 e2       	ldi	r30, 0x26	; 38
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	86 60       	ori	r24, 0x06	; 6
    1a3e:	8c 93       	st	X, r24
	
	/*Enable ADC Peripheral*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    1a40:	a6 e2       	ldi	r26, 0x26	; 38
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e6 e2       	ldi	r30, 0x26	; 38
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 68       	ori	r24, 0x80	; 128
    1a4c:	8c 93       	st	X, r24
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <ADC_u8StartConversionSynchronous>:


u8 ADC_u8StartConversionSynchronous(u8 Copy_u8ChannelNumber)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <ADC_u8StartConversionSynchronous+0x6>
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState == BUSY)
    1a60:	80 91 7e 00 	lds	r24, 0x007E
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <ADC_u8StartConversionSynchronous+0x18>
	{
		return 0;
    1a68:	1a 82       	std	Y+2, r1	; 0x02
    1a6a:	31 c0       	rjmp	.+98     	; 0x1ace <ADC_u8StartConversionSynchronous+0x7a>
	}
	else
	{
		/*Set The ADC Peripheral to Busy*/
		ADC_u8BusyState = BUSY;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 93 7e 00 	sts	0x007E, r24
		/*Clear The First 5-bits*/
		ADMUX &= CHANNEL_NUMBER_MASK;
    1a72:	a7 e2       	ldi	r26, 0x27	; 39
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e7 e2       	ldi	r30, 0x27	; 39
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 7e       	andi	r24, 0xE0	; 224
    1a7e:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelNumber;
    1a80:	a7 e2       	ldi	r26, 0x27	; 39
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e7 e2       	ldi	r30, 0x27	; 39
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	90 81       	ld	r25, Z
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	89 2b       	or	r24, r25
    1a8e:	8c 93       	st	X, r24
		/*Start The Conversion*/
		SET_BIT(ADCSRA, ADCSRA_ADSC);
    1a90:	a6 e2       	ldi	r26, 0x26	; 38
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e6 e2       	ldi	r30, 0x26	; 38
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 64       	ori	r24, 0x40	; 64
    1a9c:	8c 93       	st	X, r24
		/*Polling (Busy Waiting) until the conversion completes*/
		while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    1a9e:	e6 e2       	ldi	r30, 0x26	; 38
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	82 95       	swap	r24
    1aa6:	8f 70       	andi	r24, 0x0F	; 15
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	81 70       	andi	r24, 0x01	; 1
    1aae:	90 70       	andi	r25, 0x00	; 0
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	a9 f3       	breq	.-22     	; 0x1a9e <ADC_u8StartConversionSynchronous+0x4a>
		/*Clear The Flag*/
		SET_BIT(ADCSRA, ADCSRA_ADIF);
    1ab4:	a6 e2       	ldi	r26, 0x26	; 38
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e6 e2       	ldi	r30, 0x26	; 38
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 61       	ori	r24, 0x10	; 16
    1ac0:	8c 93       	st	X, r24
		/*Set The ADC Peripheral to Not Busy*/
		ADC_u8BusyState = NOTBUSY;
    1ac2:	10 92 7e 00 	sts	0x007E, r1
		/*Return The Result*/
		return ADCH;
    1ac6:	e5 e2       	ldi	r30, 0x25	; 37
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8a 83       	std	Y+2, r24	; 0x02
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <ADC_u8StartConversionAsynchronous>:



u8 ADC_u8StartConversionAsynchronous(u8 Copy_u8ChannelNumber, void (*Copy_pvCallBackFunction)(void))
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <ADC_u8StartConversionAsynchronous+0x6>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <ADC_u8StartConversionAsynchronous+0x8>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	7b 83       	std	Y+3, r23	; 0x03
    1aea:	6a 83       	std	Y+2, r22	; 0x02
	if(ADC_u8BusyState == BUSY)
    1aec:	80 91 7e 00 	lds	r24, 0x007E
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <ADC_u8StartConversionAsynchronous+0x1e>
	{
		return 0;
    1af4:	1c 82       	std	Y+4, r1	; 0x04
    1af6:	29 c0       	rjmp	.+82     	; 0x1b4a <ADC_u8StartConversionAsynchronous+0x70>
	}
	else
	{
		/*Set ADC To Be Busy*/
		ADC_u8BusyState = BUSY;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	80 93 7e 00 	sts	0x007E, r24
		/*Clear The First 5-bits*/
		ADMUX &= CHANNEL_NUMBER_MASK;
    1afe:	a7 e2       	ldi	r26, 0x27	; 39
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e7 e2       	ldi	r30, 0x27	; 39
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 7e       	andi	r24, 0xE0	; 224
    1b0a:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelNumber;
    1b0c:	a7 e2       	ldi	r26, 0x27	; 39
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e7 e2       	ldi	r30, 0x27	; 39
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	90 81       	ld	r25, Z
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	89 2b       	or	r24, r25
    1b1a:	8c 93       	st	X, r24
		/*Set The CallBack Function*/
		Global_pvNotificationFunction = Copy_pvCallBackFunction;
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b20:	90 93 7d 00 	sts	0x007D, r25
    1b24:	80 93 7c 00 	sts	0x007C, r24
		/*Start The Conversion*/
		SET_BIT(ADCSRA, ADCSRA_ADSC);
    1b28:	a6 e2       	ldi	r26, 0x26	; 38
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e6 e2       	ldi	r30, 0x26	; 38
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 64       	ori	r24, 0x40	; 64
    1b34:	8c 93       	st	X, r24
		/*ADC Interrupt Enable*/
		SET_BIT(ADCSRA, ADCSRA_ADIE); // => in the Init Function
    1b36:	a6 e2       	ldi	r26, 0x26	; 38
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e6 e2       	ldi	r30, 0x26	; 38
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 60       	ori	r24, 0x08	; 8
    1b42:	8c 93       	st	X, r24
		/*Return The Data*/
		return ADC_u8Result;
    1b44:	80 91 7f 00 	lds	r24, 0x007F
    1b48:	8c 83       	std	Y+4, r24	; 0x04
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    1b5a:	1f 92       	push	r1
    1b5c:	0f 92       	push	r0
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	0f 92       	push	r0
    1b62:	11 24       	eor	r1, r1
    1b64:	2f 93       	push	r18
    1b66:	3f 93       	push	r19
    1b68:	4f 93       	push	r20
    1b6a:	5f 93       	push	r21
    1b6c:	6f 93       	push	r22
    1b6e:	7f 93       	push	r23
    1b70:	8f 93       	push	r24
    1b72:	9f 93       	push	r25
    1b74:	af 93       	push	r26
    1b76:	bf 93       	push	r27
    1b78:	ef 93       	push	r30
    1b7a:	ff 93       	push	r31
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	/*Read The Result*/
	ADC_u8Result = ADCH;
    1b84:	e5 e2       	ldi	r30, 0x25	; 37
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 93 7f 00 	sts	0x007F, r24
	
	/*Check if the Global Pointer To Function points to NULL*/
	if(Global_pvNotificationFunction != NULL)
    1b8e:	80 91 7c 00 	lds	r24, 0x007C
    1b92:	90 91 7d 00 	lds	r25, 0x007D
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	71 f0       	breq	.+28     	; 0x1bb6 <__vector_16+0x5c>
	{
		/*invoke the call back function*/
		Global_pvNotificationFunction();
    1b9a:	e0 91 7c 00 	lds	r30, 0x007C
    1b9e:	f0 91 7d 00 	lds	r31, 0x007D
    1ba2:	09 95       	icall
		/*Set ADC To Be Not Busy*/
		ADC_u8BusyState = NOTBUSY;
    1ba4:	10 92 7e 00 	sts	0x007E, r1
		/*Disbale ADC Interrupt*/
		CLR_BIT(ADCSRA, ADCSRA_ADIE);
    1ba8:	a6 e2       	ldi	r26, 0x26	; 38
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e6 e2       	ldi	r30, 0x26	; 38
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	87 7f       	andi	r24, 0xF7	; 247
    1bb4:	8c 93       	st	X, r24
	else
	{
		/*Do Nothing*/
	}
	
}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	bf 91       	pop	r27
    1bc0:	af 91       	pop	r26
    1bc2:	9f 91       	pop	r25
    1bc4:	8f 91       	pop	r24
    1bc6:	7f 91       	pop	r23
    1bc8:	6f 91       	pop	r22
    1bca:	5f 91       	pop	r21
    1bcc:	4f 91       	pop	r20
    1bce:	3f 91       	pop	r19
    1bd0:	2f 91       	pop	r18
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0f 90       	pop	r0
    1bd8:	1f 90       	pop	r1
    1bda:	18 95       	reti

00001bdc <LCD_voidSendCommand>:
#include "LCD_config.h"

#include <util/delay.h>

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	2f 97       	sbiw	r28, 0x0f	; 15
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set The RS Pin To Be Low: 0 for Command*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	
	/*Set The RW Pin To Be Low: 0 for Write*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	
	/*Set The Port Value To Be The Command*/
	DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Command);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c0a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_voidSetPortSpecificValue>
	
	/*Set The Enable Pin To Be High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e4       	ldi	r27, 0x40	; 64
    1c20:	8b 87       	std	Y+11, r24	; 0x0b
    1c22:	9c 87       	std	Y+12, r25	; 0x0c
    1c24:	ad 87       	std	Y+13, r26	; 0x0d
    1c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8f 83       	std	Y+7, r24	; 0x07
    1c42:	98 87       	std	Y+8, r25	; 0x08
    1c44:	a9 87       	std	Y+9, r26	; 0x09
    1c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <LCD_voidSendCommand+0xee>
    1cac:	88 ec       	ldi	r24, 0xC8	; 200
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_voidSendCommand+0xdc>
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <LCD_voidSendCommand+0xd0>
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_voidSendCommand+0x118>
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait for 2msec*/
	_delay_ms(2);

	/*Set The Enable Pin To Be Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	62 e0       	ldi	r22, 0x02	; 2
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
}
    1d06:	2f 96       	adiw	r28, 0x0f	; 15
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	2f 97       	sbiw	r28, 0x0f	; 15
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set The RS Pin To Be High: 1 for Data*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	
	/*Set The RW Pin To Be Low: 0 for Write*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	
	/*Set The Port Value To Be The Data*/
	DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Data);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d46:	0e 94 b8 0c 	call	0x1970	; 0x1970 <DIO_voidSetPortSpecificValue>
	
	/*Set The Enable Pin To Be High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	62 e0       	ldi	r22, 0x02	; 2
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e0       	ldi	r26, 0x00	; 0
    1d5a:	b0 e4       	ldi	r27, 0x40	; 64
    1d5c:	8b 87       	std	Y+11, r24	; 0x0b
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	ad 87       	std	Y+13, r26	; 0x0d
    1d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8f 83       	std	Y+7, r24	; 0x07
    1d7e:	98 87       	std	Y+8, r25	; 0x08
    1d80:	a9 87       	std	Y+9, r26	; 0x09
    1d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_voidSendData+0x8e>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1da6:	6f 81       	ldd	r22, Y+7	; 0x07
    1da8:	78 85       	ldd	r23, Y+8	; 0x08
    1daa:	89 85       	ldd	r24, Y+9	; 0x09
    1dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_voidSendData+0xee>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_voidSendData+0xdc>
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_voidSendData+0xd0>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_voidSendData+0x118>
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait for 2msec*/
	_delay_ms(2);

	/*Set The Enable Pin To Be Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	62 e0       	ldi	r22, 0x02	; 2
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
}
    1e42:	2f 96       	adiw	r28, 0x0f	; 15
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
	/*Set The Data Port To Be Output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	0e 94 4f 0b 	call	0x169e	; 0x169e <DIO_voidSetPortDirection>
	
	/*Set The Control Pins To Be Output*/
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	61 e0       	ldi	r22, 0x01	; 1
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT);
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	62 e0       	ldi	r22, 0x02	; 2
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e2       	ldi	r26, 0x20	; 32
    1e94:	b2 e4       	ldi	r27, 0x42	; 66
    1e96:	8b 87       	std	Y+11, r24	; 0x0b
    1e98:	9c 87       	std	Y+12, r25	; 0x0c
    1e9a:	ad 87       	std	Y+13, r26	; 0x0d
    1e9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a ef       	ldi	r20, 0xFA	; 250
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8f 83       	std	Y+7, r24	; 0x07
    1eb8:	98 87       	std	Y+8, r25	; 0x08
    1eba:	a9 87       	std	Y+9, r26	; 0x09
    1ebc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec0:	78 85       	ldd	r23, Y+8	; 0x08
    1ec2:	89 85       	ldd	r24, Y+9	; 0x09
    1ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <LCD_voidInit+0x8c>
		__ticks = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	3f c0       	rjmp	.+126    	; 0x1f5e <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee2:	78 85       	ldd	r23, Y+8	; 0x08
    1ee4:	89 85       	ldd	r24, Y+9	; 0x09
    1ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	3f ef       	ldi	r19, 0xFF	; 255
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	57 e4       	ldi	r21, 0x47	; 71
    1ef0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	4c f5       	brge	.+82     	; 0x1f4a <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <LCD_voidInit+0xec>
    1f22:	88 ec       	ldi	r24, 0xC8	; 200
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9c 83       	std	Y+4, r25	; 0x04
    1f28:	8b 83       	std	Y+3, r24	; 0x03
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <LCD_voidInit+0xda>
    1f32:	9c 83       	std	Y+4, r25	; 0x04
    1f34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	69 f7       	brne	.-38     	; 0x1f22 <LCD_voidInit+0xce>
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <LCD_voidInit+0x116>
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait for more than 30msec*/
	_delay_ms(40);
	
	/*Send The Function Set Command: N: 1=> 2-Lines, F: 0=> 5*8 Dots*/
	LCD_voidSendCommand(0x38);
    1f72:	88 e3       	ldi	r24, 0x38	; 56
    1f74:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
	
	/*Send The Function Set Command: D: 1=> Display ON, C: 1=> Visible, B: 1=> Blink*/
	LCD_voidSendCommand(0x0F);
    1f78:	8f e0       	ldi	r24, 0x0F	; 15
    1f7a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
	
	/*Send The Display Clear Command*/
	LCD_voidSendCommand(0x01);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
}
    1f84:	2e 96       	adiw	r28, 0x0e	; 14
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <KPD_voidInit>:
	
*/


void KPD_voidInit(void)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	/* Set The Columns Pins To Be Output*/
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, OUTPUT);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, OUTPUT);
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, OUTPUT);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	62 e0       	ldi	r22, 0x02	; 2
    1fb6:	41 e0       	ldi	r20, 0x01	; 1
    1fb8:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, OUTPUT);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	63 e0       	ldi	r22, 0x03	; 3
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	
	/* Set The Columns Pins To Be High*/
	DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, HIGH);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, HIGH);
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, HIGH);
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	62 e0       	ldi	r22, 0x02	; 2
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, HIGH);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	63 e0       	ldi	r22, 0x03	; 3
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	
	/* Set The Rows Pins To Be Input*/
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW0_PIN, INPUT);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	64 e0       	ldi	r22, 0x04	; 4
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW1_PIN, INPUT);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	65 e0       	ldi	r22, 0x05	; 5
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW2_PIN, INPUT);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	66 e0       	ldi	r22, 0x06	; 6
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROWS_PORT, KPD_ROW3_PIN, INPUT);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	67 e0       	ldi	r22, 0x07	; 7
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	
	/* Set The Rows Pins To Be Pulled Up*/
	DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW0_PIN, PULLUP);
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	64 e0       	ldi	r22, 0x04	; 4
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW1_PIN, PULLUP);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	65 e0       	ldi	r22, 0x05	; 5
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW2_PIN, PULLUP);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	66 e0       	ldi	r22, 0x06	; 6
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROWS_PORT, KPD_ROW3_PIN, PULLUP);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	67 e0       	ldi	r22, 0x07	; 7
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	
}
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	a2 97       	sbiw	r28, 0x22	; 34
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColumnsIndex;
	u8 Local_u8RowsIndex;
	u8 Local_u8PinState;
	u8 Local_u8PressedKey = KPD_NO_PRESSEDKEY;
    2058:	8a ea       	ldi	r24, 0xAA	; 170
    205a:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    205c:	1d 82       	std	Y+5, r1	; 0x05
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	8e 83       	std	Y+6, r24	; 0x06
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	8f 83       	std	Y+7, r24	; 0x07
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	88 87       	std	Y+8, r24	; 0x08
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    206a:	84 e0       	ldi	r24, 0x04	; 4
    206c:	89 87       	std	Y+9, r24	; 0x09
    206e:	85 e0       	ldi	r24, 0x05	; 5
    2070:	8a 87       	std	Y+10, r24	; 0x0a
    2072:	86 e0       	ldi	r24, 0x06	; 6
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	87 e0       	ldi	r24, 0x07	; 7
    2078:	8c 87       	std	Y+12, r24	; 0x0c
	u8 Local_u8KeysArray[4][4] = KPD_KEYSARRAY_VALUES;
    207a:	ce 01       	movw	r24, r28
    207c:	0d 96       	adiw	r24, 0x0d	; 13
    207e:	9f 8f       	std	Y+31, r25	; 0x1f
    2080:	8e 8f       	std	Y+30, r24	; 0x1e
    2082:	e8 e6       	ldi	r30, 0x68	; 104
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	f9 a3       	std	Y+33, r31	; 0x21
    2088:	e8 a3       	std	Y+32, r30	; 0x20
    208a:	f0 e1       	ldi	r31, 0x10	; 16
    208c:	fa a3       	std	Y+34, r31	; 0x22
    208e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2090:	f9 a1       	ldd	r31, Y+33	; 0x21
    2092:	00 80       	ld	r0, Z
    2094:	88 a1       	ldd	r24, Y+32	; 0x20
    2096:	99 a1       	ldd	r25, Y+33	; 0x21
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	99 a3       	std	Y+33, r25	; 0x21
    209c:	88 a3       	std	Y+32, r24	; 0x20
    209e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20a0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20a2:	00 82       	st	Z, r0
    20a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	9f 8f       	std	Y+31, r25	; 0x1f
    20ac:	8e 8f       	std	Y+30, r24	; 0x1e
    20ae:	9a a1       	ldd	r25, Y+34	; 0x22
    20b0:	91 50       	subi	r25, 0x01	; 1
    20b2:	9a a3       	std	Y+34, r25	; 0x22
    20b4:	ea a1       	ldd	r30, Y+34	; 0x22
    20b6:	ee 23       	and	r30, r30
    20b8:	51 f7       	brne	.-44     	; 0x208e <KPD_u8GetPressedKey+0x4a>
	/*Loop For Columns*/
	for(Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    20ba:	1c 82       	std	Y+4, r1	; 0x04
    20bc:	62 c0       	rjmp	.+196    	; 0x2182 <KPD_u8GetPressedKey+0x13e>
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], LOW);
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	ce 01       	movw	r24, r28
    20c6:	05 96       	adiw	r24, 0x05	; 5
    20c8:	fc 01       	movw	r30, r24
    20ca:	e2 0f       	add	r30, r18
    20cc:	f3 1f       	adc	r31, r19
    20ce:	90 81       	ld	r25, Z
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	69 2f       	mov	r22, r25
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
		/*Loop For Rows*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    20da:	1b 82       	std	Y+3, r1	; 0x03
    20dc:	3d c0       	rjmp	.+122    	; 0x2158 <KPD_u8GetPressedKey+0x114>
		{
			/*Get The Row Pin Value*/
			Local_u8PinState = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex]);
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	ce 01       	movw	r24, r28
    20e6:	09 96       	adiw	r24, 0x09	; 9
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	90 81       	ld	r25, Z
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	69 2f       	mov	r22, r25
    20f4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_u8GetPinValue>
    20f8:	8a 83       	std	Y+2, r24	; 0x02
			/*Check if the current raw pin is low */
			if(Local_u8PinState == 0)
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	88 23       	and	r24, r24
    20fe:	49 f5       	brne	.+82     	; 0x2152 <KPD_u8GetPressedKey+0x10e>
			{
				/*Get The Pressed Key*/
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	48 2f       	mov	r20, r24
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	22 0f       	add	r18, r18
    2112:	33 1f       	adc	r19, r19
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	82 0f       	add	r24, r18
    211a:	93 1f       	adc	r25, r19
    211c:	84 0f       	add	r24, r20
    211e:	95 1f       	adc	r25, r21
    2120:	fc 01       	movw	r30, r24
    2122:	3c 96       	adiw	r30, 0x0c	; 12
    2124:	80 81       	ld	r24, Z
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	0e c0       	rjmp	.+28     	; 0x2146 <KPD_u8GetPressedKey+0x102>
				/*Polling (Busy Waiting), Wait until the Pressed Key is released*/
				while(Local_u8PinState == 0)
				{
					/*Read The Current Row*/
					Local_u8PinState = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex]);
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	ce 01       	movw	r24, r28
    2132:	09 96       	adiw	r24, 0x09	; 9
    2134:	fc 01       	movw	r30, r24
    2136:	e2 0f       	add	r30, r18
    2138:	f3 1f       	adc	r31, r19
    213a:	90 81       	ld	r25, Z
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	69 2f       	mov	r22, r25
    2140:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_u8GetPinValue>
    2144:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_u8PinState == 0)
			{
				/*Get The Pressed Key*/
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
				/*Polling (Busy Waiting), Wait until the Pressed Key is released*/
				while(Local_u8PinState == 0)
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	88 23       	and	r24, r24
    214a:	79 f3       	breq	.-34     	; 0x212a <KPD_u8GetPressedKey+0xe6>
				{
					/*Read The Current Row*/
					Local_u8PinState = DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex]);
				}
				/*Return The Pressed Key*/
				return Local_u8PressedKey;
    214c:	f9 81       	ldd	r31, Y+1	; 0x01
    214e:	fd 8f       	std	Y+29, r31	; 0x1d
    2150:	1e c0       	rjmp	.+60     	; 0x218e <KPD_u8GetPressedKey+0x14a>
	for(Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
	{
		/*Activate The Current Column*/
		DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], LOW);
		/*Loop For Rows*/
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	8f 5f       	subi	r24, 0xFF	; 255
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	84 30       	cpi	r24, 0x04	; 4
    215c:	08 f4       	brcc	.+2      	; 0x2160 <KPD_u8GetPressedKey+0x11c>
    215e:	bf cf       	rjmp	.-130    	; 0x20de <KPD_u8GetPressedKey+0x9a>
				/*Return The Pressed Key*/
				return Local_u8PressedKey;
			}
		}
		/*Deactivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], HIGH);
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	ce 01       	movw	r24, r28
    2168:	05 96       	adiw	r24, 0x05	; 5
    216a:	fc 01       	movw	r30, r24
    216c:	e2 0f       	add	r30, r18
    216e:	f3 1f       	adc	r31, r19
    2170:	90 81       	ld	r25, Z
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	69 2f       	mov	r22, r25
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPinValue>
	u8 Local_u8PressedKey = KPD_NO_PRESSEDKEY;
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	u8 Local_u8KeysArray[4][4] = KPD_KEYSARRAY_VALUES;
	/*Loop For Columns*/
	for(Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	8c 83       	std	Y+4, r24	; 0x04
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	08 f4       	brcc	.+2      	; 0x218a <KPD_u8GetPressedKey+0x146>
    2188:	9a cf       	rjmp	.-204    	; 0x20be <KPD_u8GetPressedKey+0x7a>
		}
		/*Deactivate The Current Column*/
		DIO_voidSetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], HIGH);
	}
	/*Return The No Pressed Key Value*/
	return Local_u8PressedKey;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	8d 8f       	std	Y+29, r24	; 0x1d
    218e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2190:	a2 96       	adiw	r28, 0x22	; 34
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <main>:
#include "../MCAL/DIO/DIO_interface.h"
#include "../MCAL/TIMERS/TIMERS_interface.h"


void main(void)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTD, PIN5, OUTPUT);
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	65 e0       	ldi	r22, 0x05	; 5
    21ae:	41 e0       	ldi	r20, 0x01	; 1
    21b0:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_voidSetPinDirection>
	TIMERS_voidTimer1Init();
    21b4:	0e 94 d4 05 	call	0xba8	; 0xba8 <TIMERS_voidTimer1Init>
	TIMERS_voidTimer1SetOverflowValue(19999);
    21b8:	8f e1       	ldi	r24, 0x1F	; 31
    21ba:	9e e4       	ldi	r25, 0x4E	; 78
    21bc:	0e 94 1a 06 	call	0xc34	; 0xc34 <TIMERS_voidTimer1SetOverflowValue>

	while(1)
	{
		TIMERS_voidTimer1ChannelASetCompareMatchValue(999); // 0 Angle
    21c0:	87 ee       	ldi	r24, 0xE7	; 231
    21c2:	93 e0       	ldi	r25, 0x03	; 3
    21c4:	0e 94 2c 06 	call	0xc58	; 0xc58 <TIMERS_voidTimer1ChannelASetCompareMatchValue>
    21c8:	fb cf       	rjmp	.-10     	; 0x21c0 <main+0x1e>

000021ca <__prologue_saves__>:
    21ca:	2f 92       	push	r2
    21cc:	3f 92       	push	r3
    21ce:	4f 92       	push	r4
    21d0:	5f 92       	push	r5
    21d2:	6f 92       	push	r6
    21d4:	7f 92       	push	r7
    21d6:	8f 92       	push	r8
    21d8:	9f 92       	push	r9
    21da:	af 92       	push	r10
    21dc:	bf 92       	push	r11
    21de:	cf 92       	push	r12
    21e0:	df 92       	push	r13
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	ca 1b       	sub	r28, r26
    21f4:	db 0b       	sbc	r29, r27
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	09 94       	ijmp

00002202 <__epilogue_restores__>:
    2202:	2a 88       	ldd	r2, Y+18	; 0x12
    2204:	39 88       	ldd	r3, Y+17	; 0x11
    2206:	48 88       	ldd	r4, Y+16	; 0x10
    2208:	5f 84       	ldd	r5, Y+15	; 0x0f
    220a:	6e 84       	ldd	r6, Y+14	; 0x0e
    220c:	7d 84       	ldd	r7, Y+13	; 0x0d
    220e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2210:	9b 84       	ldd	r9, Y+11	; 0x0b
    2212:	aa 84       	ldd	r10, Y+10	; 0x0a
    2214:	b9 84       	ldd	r11, Y+9	; 0x09
    2216:	c8 84       	ldd	r12, Y+8	; 0x08
    2218:	df 80       	ldd	r13, Y+7	; 0x07
    221a:	ee 80       	ldd	r14, Y+6	; 0x06
    221c:	fd 80       	ldd	r15, Y+5	; 0x05
    221e:	0c 81       	ldd	r16, Y+4	; 0x04
    2220:	1b 81       	ldd	r17, Y+3	; 0x03
    2222:	aa 81       	ldd	r26, Y+2	; 0x02
    2224:	b9 81       	ldd	r27, Y+1	; 0x01
    2226:	ce 0f       	add	r28, r30
    2228:	d1 1d       	adc	r29, r1
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	ed 01       	movw	r28, r26
    2236:	08 95       	ret

00002238 <_exit>:
    2238:	f8 94       	cli

0000223a <__stop_program>:
    223a:	ff cf       	rjmp	.-2      	; 0x223a <__stop_program>
